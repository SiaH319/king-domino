namespace ca.mcgill.ecse223.kingdomino.model;  

//Unable to update umple code due to error at null
enum TerrainType { WheatFiled, Lake, Forest, Grass, Mountain }
enum Color { Green, Blue, Yellow, Pink }
enum DraftStatus { Current, Next, Unpicked}
enum PlacementState {Provisional, Discarded, Finished};
enum OptionType { Dynasty, Harmony, middleKingdom }

class Application {
   1 <@>- 0..* User;
  1 <@>- 0..* Game;
}

class User {
  unique String username;
  defaulted int totalGamesPlayed = 0; 
  defaulted int totalWins = 0;
  before constructor, setUsername{
   		if(aUsername.isEmpty() || aUsername.equals("") || aUsername == null){
   			throw new RuntimeException("The username must be specified.");
   		}	
   }
  1 -- 0..* Player;

}

class Game{
  immutable int numberOfPlayers;
  defaulted int round = 0; 
  int currentRound;
1 <@>- 0..3 GameOption;
  1 <@>- 6..12 Draft;
  1 current--1 Draft currentDraft;
  1 nextRound-- 1 Draft nextDraft;
  1 <@>- 2..4 Player;
  1 <@>- 3..4 King;
  1 <@>- 48 Domino;
}

class Player{
  unique String name;
  int score;
  int rankInAllPlayers;
  1 -- 1..2 King;
  1 -- 1 Kingdom;
  }

class King {
  immutable Color color;
  int currentPosition;
  int untillHisTurn;
1 -- 0..12 Domino;
}
class Draft {
  // enum DraftStatus { Current, Next, Unpicked}
  DraftStatus draftStatus;
  unique Integer id;
  1 -- 3..4 Domino;
}

class Domino {
  immutable String leftTileInfo;
  immutable String rightTileInfo;
  unique Integer id;
   0..1 -> 1 DominoRole;
}
class Castle {
  int position;
  immutable Color color;
  0..1 ->1 Square castlePosition;
  
}

class DominoRole {
  abstract;
}
class DominoToPick {
   int positionInDraft;
isA DominoRole;
}

class DominoToPlace {
   isA DominoRole;
  // enum PlacementState {Provisional, Discarded, Finished};
  PlacementState placementState;
  int orientation;
  int position;
 
  0..1  -> 1 Square RightTile;
  0..1  -> 1 Square LeftTile;
  
}
class GameOption {
  // enum OptionType { Dynasty, Harmony,Dynasty }
  unique OptionType optiontype;
  immutable String desctiption;
  Boolean activated;
}

class Property {
  unique Integer id;
  immutable TerrainType type;
  int numberOfTiles;
  int numberOfCrowns;
  int propertyScore;
  1 -- 0..2 Domino;
}

class Kingdom {
  const int SIZE = 5;
  defaulted int currentHeight = 0;
  defaulted int currentWidth = 0;
  int normalScore;
  int bonusScore;
  int totalScore;
  1 -- 0..25 Square;
  1 <@>- 0..* Property;
  1 <@>- 1 Castle;
}
 
class Square{
  lazy TerrainType type;
  immutable int position;
  defaulted int propertyId = -1;
  0..1 -- 0..4 Square Adjacent;
}
