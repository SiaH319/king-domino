namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay {
	depend ca.mcgill.ecse223.kingdomino.controller.GameplayController;
    gamestatus {
        SettingUp {
        	createNewUser(String name) -> /{createUser(name);} SettingUp;
            startNewGame(int numOfPlayers, boolean mkActivated, boolean harmonyActivated,String[] userNames) 
            -> /{initializeGame(numOfPlayers,userNames);setGameOptions(mkActivated, harmonyActivated);} Initializing.CreatingFirstDraft;
            loadGame(String filename) [isLoadedGameValid(filename)] -> /{} InGame;
            loadGame(String filename) [!isLoadedGameValid(filename)] -> /{} SettingUp;
        }
        Initializing {
        	CreatingFirstDraft {
                entry/{shuffleDominoPile(); createNextDraft(); orderNextDraft();}
                draftReady -> /{revealNextDraft(); generateInitialPlayerOrder();} Initializing.SelectingFirstDomino;
            }
            SelectingFirstDomino {
            	makeSelection(int id) [!isSelectionValid(id)] -> /{} Initializing.SelectingFirstDomino;
                makeSelection(int id) [isSelectionValid(id)&&!isCurrentPlayerTheLastInTurn()]-> 
                /{currentPlayerSelectDomino(id);switchCurrentPlayer();} Initializing.SelectingFirstDomino;
                makeSelection(int id) [isSelectionValid(id)&&isCurrentPlayerTheLastInTurn()] ->/ {currentPlayerSelectDomino(id);} Initializing.RevealDraft;
            }
            RevealDraft{
            	proceed ->/{revealNextDraft();switchCurrentPlayer();} InGame.PreplacingDomino;
            }
        }
        InGame {
            PreplacingDomino {
                moveDomino(String dir) -> /{moveCurrentDomino(dir);} InGame.PreplacingDomino;
                rotateDomino(int dir) -> /{rotateCurrentDomino(dir);} InGame.PreplacingDomino;
                place [isCorrectlyPreplaced() && !isCurrentTurnTheLastInGame()] -> /{placeDomino(); calculateCurrentPlayerScore();} InGame.SelectingNextDomino;
                place [isCorrectlyPreplaced() && isCurrentPlayerTheLastInTurn() && isCurrentTurnTheLastInGame()] ->
                    /{placeDomino();calculateCurrentPlayerScore();} EndofGame;
                place [isCorrectlyPreplaced() && !isCurrentPlayerTheLastInTurn() && isCurrentTurnTheLastInGame()] 
                	->/{placeDomino();calculateCurrentPlayerScore();switchCurrentPlayer();} InGame.PreplacingDomino;
                discard [impossibleToPlaceDomino() && !isCurrentTurnTheLastInGame()]-> /{discardDomino(); calculateCurrentPlayerScore();} InGame.SelectingNextDomino;
                discard  [impossibleToPlaceDomino() && isCurrentTurnTheLastInGame() && isCurrentPlayerTheLastInTurn()]-> /{discardDomino(); calculateCurrentPlayerScore();} EndofGame;
                discard  [impossibleToPlaceDomino() && isCurrentTurnTheLastInGame() && !isCurrentPlayerTheLastInTurn()]
                -> /{discardDomino(); calculateCurrentPlayerScore();switchCurrentPlayer();} InGame.PreplacingDomino;
                
            }
            SelectingNextDomino {
                makeSelection(int id) [isSelectionValid(id)]-> /{currentPlayerSelectDomino(id);} InGame.ProceedingToNextPlayerOrNextTurn;
            }
            ProceedingToNextPlayerOrNextTurn {
                proceed [!isCurrentPlayerTheLastInTurn()] -> /{switchCurrentPlayer();} InGame.PreplacingDomino;
                proceed [isCurrentPlayerTheLastInTurn()] -> /{createNextDraft();} InGame.OrderingRevealingNextDraft;
            }
            OrderingRevealingNextDraft {
                order [areAllDominoesInCurrentDraftSelected()]-> /{orderNextDraft();revealNextDraft();switchCurrentPlayer();} InGame.PreplacingDomino;
            }
            saveGame(String filename) -> /{save(filename);} SettingUp;
        }
        EndofGame {
           	entry/{calculatePlayerRanking();}
           	restart -> /{} SettingUp;
        }
    }

    /*
     * Setter for test setup
     */

    public void setGamestatus(String status) {
        switch (status) {
        case "SelectingFirstDomino":
            gamestatus = Gamestatus.Initializing;
            gamestatusInitializing = GamestatusInitializing.SelectingFirstDomino;
            break;
       	case "OrderingNextDraft":
       		gamestatus = Gamestatus.InGame;
       		gamestatusInGame = GamestatusInGame.OrderingNextDraft;
       		break;
       	case "PreplacingDomino":
       		gamestatus=Gamestatus.InGame;
       		gamestatusInGame = GamestatusInGame.PreplacingDomino;
       		break;
       	case "SettingUp":
       		gamestatus = Gamestatus.SettingUp;
       		break;
		case "SelectingNextDomino":
            gamestatus = Gamestatus.InGame;
            gamestatusInGame = GamestatusInGame.SelectingNextDomino;
            break;
       	// TODO add further cases here to set desired state
       	default:
       	    throw new RuntimeException("Invalid Game Status string was provided: " + status);
       	}
    }

    /*
     * Guards
     */
     
    public boolean areAllDominoesInCurrentDraftSelected() {
    	return GameplayController.areAllDominoesInCurrentDraftSelected();
    }
    
    public boolean isCurrentPlayerTheLastInTurn() {
        return GameplayController.isCurrentPlayerTheLastInTurn();
    }
        
    public boolean isCurrentTurnTheLastInGame() {
        return GameplayController.isCurrentTurnTheLastInGame(); 
    }

    public boolean isCorrectlyPreplaced() {
        return GameplayController.isCorrectlyPreplaced();
    }

    public boolean isLoadedGameValid(String filename){
        
        return GameplayController.isLoadedGameValid(filename);
    }

    public boolean impossibleToPlaceDomino() {
        return GameplayController.impossibleToPlaceDomino();
    }
    
    public boolean isSelectionValid(int id){
    	return GameplayController.isSelectionValid(id);
    }
    // You may need to add more guards here
        
    /*
     * Actions
     */
     
    public void createUser(String name){
        String error = GameplayController.acceptCreateUserCallFromSM(name);
		GameplayController.setError(error);
    }
    
    public void calculatePlayerRanking() {
    	GameplayController.acceptCallFromSM("calculateRanking");
    }
   
    public void shuffleDominoPile() {
        GameplayController.acceptCallFromSM("shuffleDominoPile");

    }
    
    public void generateInitialPlayerOrder() {
        GameplayController.acceptCallFromSM("generateInitialPlayerOrder");
    }
    
    public void createNextDraft() {
   		 GameplayController.acceptCallFromSM("createNextDraft");

    }
    
    public void orderNextDraft() {
        GameplayController.acceptCallFromSM("orderNextDraft");
    }
    
    public void revealNextDraft() {
        GameplayController.acceptCallFromSM("revealNextDraft");
    }
    
    public void initializeGame(int numOfPlayers,String[] userNames) {
        GameplayController.acceptInitializeGameCallFromSM(numOfPlayers,userNames);

    }
    
    public void setGameOptions(boolean mkActivated, boolean harmonyActivated) {
       GameplayController.acceptSetBonusOptionFromSM(mkActivated, harmonyActivated);
    }
    
    public void currentPlayerSelectDomino(int id) {
    	GameplayController.acceptSelectDominoCallFromSM(id);
    }
    
    public void moveCurrentDomino(String dir) {
    	GameplayController.acceptMoveDominoCallFromSM(dir);
    }
    
    public void rotateCurrentDomino(int dir) {
    	GameplayController.acceptRotateCurrentDomino(dir);
    }
    
    public void placeDomino() {
    	GameplayController.acceptPlaceDominoFromSM();
    }
    
    public void discardDomino() {
    	GameplayController.acceptDiscardDominoFromSM();
    }
    
    public void calculateCurrentPlayerScore() {
    	GameplayController.acceptCallFromSM("calculateCurrentPlayerScore");
    }
    
    public void switchCurrentPlayer() {
    	GameplayController.acceptCallFromSM("switchCurrentPlayer");
    }
     
    public void save(String filename) {
    	GameplayController.acceptSaveGameCallFromSM(filename);
    }
    
    
    // You may need to add more actions here
}
