namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay {

    gamestatus {
        // TODO: complete gameplay state machine
        SettingUp{
            startNewGame(int numOfPlayers) -> /{initializeGame(numOfPlayers);setGameOptions();} Initializing.CreatingFirstDraft;
            loadGame [isLoadedGameValid()] -> /{load();} InGame;
            loadGame [!isLoadedGameValid()] -> /{} SettingUp;
        }
        Initializing {
            CreatingFirstDraft {
                entry/{shuffleDominoPile(); createNextDraft(); orderNextDraft();}
                draftReady -> /{revealNextDraft(); generateInitialPlayerOrder();} Initializing.SelectingFirstDomino;
            }
            SelectingFirstDomino {
                makeSelection(int id) -> /{currentPlayerSelectDomino(id);} Initializing.ProceedingToNextPlayerOrNextTurn;
            }
            ProceedingToNextPlayerOrNextTurn{
                proceed [!isCurrentPlayerTheLastInTurn()] -> /{} Initializing.SelectingFirstDomino;
                proceed [isCurrentPlayerTheLastInTurn()] -> /{} InGame.OrderingNextDraft;
                exit/{switchCurrentPlayer();}
            }
        }
        InGame{
            PreplacingDomino{
                moveDomino(String dir) -> /{moveCurrentDomino(dir);} InGame.PreplacingDomino;
                rotateDomino(int dir) -> /{rotateCurrentDomino(dir);} InGame.PreplacingDomino;
                place [isCorrectlyPreplaced() && !isCurrentTurnTheLastInGame()] -> /{placeDomino(); calculateCurrentPlayerScore();} InGame.SelectingNextDomino;
                place [isCorrectlyPreplaced() && isCurrentPlayerTheLastInTurn() && isCurrentTurnTheLastInGame()] ->
                    /{placeDomino();calculateCurrentPlayerScore();} EndofGame;
                place [isCorrectlyPreplaced() && !isCurrentPlayerTheLastInTurn() && isCurrentTurnTheLastInGame()] ->/{placeDomino();calculateCurrentPlayerScore();} InGame.ProceedingToNextPlayerOrNextTurn;
                discardDomino [!isCurrentTurnTheLastInGame()]-> /{calculateCurrentPlayerScore();} InGame.SelectingNextDomino;
            }
            SelectingNextDomino{
                makeSelection(int id) -> /{currentPlayerSelectDomino(id);} InGame.ProceedingToNextPlayerOrNextTurn;
            }
            ProceedingToNextPlayerOrNextTurn{
                proceed [!isCurrentPlayerTheLastInTurn()] -> /{} InGame.PreplacingDomino;
                proceed [isCurrentPlayerTheLastInTurn()] -> /{} InGame.OrderingNextDraft;
                exit/{switchCurrentPlayer();}
            }
            OrderingNextDraft{
                order -> /{orderNextDraft();} InGame.RevealingNextDraft;
            }
            RevealingNextDraft{
                reveal -> /{revealNextDraft();} InGame.PreplacingDomino;
            }
            saveGame -> /{save();} SettingUp;
        }
        EndofGame{
            entry/{calculateRanking();resolveTieBreak();}
        }
    }

    /*
     * Setter for test setup
     */

    public void setGamestatus(String status){
        switch (status) {
       	case "CreatingFirstDraft":
       	    gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.CreatingFirstDraft;
       	// TODO add further cases here to set desired state
       	default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
       	}
    }

    /*
     * Guards
     */
    
    public boolean isCurrentPlayerTheLastInTurn() {
        // TODO: implement this
        return false;
    }
        
    public boolean isCurrentTurnTheLastInGame() {
        // TODO: implement this
        return false;
    }

    public boolean isCorrectlyPreplaced() {
        // TODO: implement this
        return false;
    }

    public boolean isLoadedGameValid(){
        // TODO: implement this
        return false;
    }
    // You may need to add more guards here
        
    /*
     * Actions
     */
    
    public void shuffleDominoPile() {
        // TODO: implement this
    }
    
    public void generateInitialPlayerOrder() {
        // TODO: implement this
    }
    
    public void createNextDraft() {
        // TODO: implement this
    }
    
    public void orderNextDraft() {
        // TODO: implement this
    }
    
    public void revealNextDraft() {
        // TODO: implement this
    }
    
    public void initializeGame(int numOfPlayers){
    
    }
    
    public void setGameOptions(){
    
    }
    
    public void currentPlayerSelectDomino(int id){
    	
    }
    
    public void moveCurrentDomino(String dir){
    	
    }
    
    public void rotateCurrentDomino(int dir){
    	
    }
    
    public void placeDomino(){
    	
    }
    
    public void calculateCurrentPlayerScore(){
    	
    }
    
    public void calculateRanking(){
    	
    }
    
    public void resolveTieBreak(){
    	
    }
    
    public void switchCurrentPlayer(){
    	
    }
     
    public void save(){
    	
    }
    
    public void load(){
    	
    }
    
    
    // You may need to add more actions here
}
