namespace ca.mcgill.ecse223.kingdomino.model;

class Gameplay {

    gamestatus {
        // TODO: complete gameplay state machine
        Idle{
            startNewGame -> /{initializeGame();} Initializing.CreatingFirstDraft;
            loadGame [isLoadedGameValid()] -> /{load();} InGame;
            loadGame [!isLoadedGameValid()] -> /{} Idle;
        }
        Initializing {
            CreatingFirstDraft {
                entry/{shuffleDominoPile(); createNextDraft(); orderNextDraft();}
                draftReady -> /{revealNextDraft(); generateInitialPlayerOrder();} Initializing.SelectingFirstDomino;
            }
            SelectingFirstDomino {
                makeSelection -> {currentPlayerSelectDomino()} ProceedingToNextPlayerOrNextTurn;
            }
            ProceedingToNextPlayerOrNextTurn{
                proceed [!isCurrentPlayerTheLastInTurn()] -> {switchCurrentPlayer();} SelectingFirstDomino;
                proceed [isCurrentPlayerTheLastInTurn()] ->{} InGame.OrderingNextDraft;
            }
        }
        InGame{
            PreplacingDomino{
                moveDomino -> {} InGame.PreplacingDomino;
                rotateDomino -> {} InGame.PreplacingDomino;
                placeDomino [isCorrectlyPreplaced()] -> {calculateCurrentPlayerScore();} SelectingNextDomino;
                discardDomino -> {calculateCurrentPlayerScore();} SelectingNextDomino;
            }
            SelectingNextDomino{
                makeSelection  -> {currentPlayerSelectDomino()} ProceedingToNextPlayerOrNextTurn;
            }
            ProceedingToNextPlayerOrNextTurn{
                proceed [isCurrentPlayerTheLastInTurn()] [isCurrentTurnTheLastInGame()] -> {} EndofGame;
                proceed [!isCurrentPlayerTheLastInTurn()] [!isCurrentTurnTheLastInGame()] -> {switchCurrentPlayer();} InGame.PreplacingDomino;
                proceed [isCurrentPlayerTheLastInTurn()] [!isCurrentTurnTheLastInGame()] ->{} InGame.OrderingNextDraft;
            }
            OrderingNextDraft{
                orderDraft -> {orderNextDraft();} InGame.RevealingNextDraft;
            }
            RevealingNextDraft{
                revealNextDraft -> {revealNextDraft} InGame.PreplacingDomino;
            }
        }
        EndofGame{
            entry/{calculateRanking();resolveTieBreak();}
        }
    }

    /*
     * Setter for test setup
     */

    public void setGamestatus(String status){
        switch (status) {
       	case "CreatingFirstDraft":
       	    gamestatus = Gamestatus.Initializing;
       	    gamestatusInitializing = GamestatusInitializing.CreatingFirstDraft;
       	// TODO add further cases here to set desired state
       	default:
       	    throw new RuntimeException("Invalid gamestatus string was provided: " + status);
       	}
    }

    /*
     * Guards
     */
    
    public boolean isCurrentPlayerTheLastInTurn() {
        // TODO: implement this
        return false;
    }
        
    public boolean isCurrentTurnTheLastInGame() {
        // TODO: implement this
        return false;
    }
    
    // You may need to add more guards here
        
    /*
     * Actions
     */
    
    public void shuffleDominoPile() {
        // TODO: implement this
    }
    
    public void generateInitialPlayerOrder() {
        // TODO: implement this
    }
    
    public void createNextDraft() {
        // TODO: implement this
    }
    
    public void orderNextDraft() {
        // TODO: implement this
    }
    
    public void revealNextDraft() {
        // TODO: implement this
    }
    
    // You may need to add more actions here
}
